app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  log:
    level: debug

  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format

  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
      - "'self'"
      - 'data:'
      - '"https://rsowmya1908.atlassian.net/rest/api/3"'
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

  reading:
    allow:
      - host: raw.githubusercontent.com

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: $env:GHE_TOKEN
gitpod:
  baseUrl: https://gitpod.io

jira:
  proxyPath: /jira/api
  apiVersion: 3

proxy:
  '/jira/api':
    target: https://backstage-automation.atlassian.net
    headers:
      Authorization: 'Basic c2hhc2hhbmtkYXR0MDQ2QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjA2VWo2b3lILUcyWWpxdXFjeUt0Yk9OdGRWclBrVE5MT1Nlbm1nRUhkNjR1dUtOb0MwNGpvNFJxWkZJTmxKRGRKRkl4RkZzQUJPemRfcl8zSThWdFpPV2JiSDRkZUE2WnI3YkVaNGpkV1NNTExEV2NCbjZTWVhWclVTbG9taV90WUsyZXItUFRwc3Y2QnJmcGZ0Mk1zS214YWxHVFZhalBKVFZkVzZoV2NjRmM9MDg0NDZBOUI='
      Accept: 'application/json'
      Content-Type: 'application/json'
      X-Atlassian-Token: 'no-check'
      User-Agent: 'BackstageJiraPlugin'

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development
  providers:
    saml:
      metadataUrl: http://localhost:8080/realms/backstage-realm/protocol/saml/descriptor
      entryPoint: http://localhost:8080/realms/backstage-realm/protocol/saml
      issuer: http://localhost:7007/api/auth/saml/metadata
      audience: http://localhost:7007/api/auth/saml/metadata
      callbackUrl: http://localhost:7007/api/auth/saml/handler/frame
      cert:
        $file: ./packages/saml.crt
      signatureAlgorithm: sha256

    github:
      development:
        clientId: $env:GITHUB_OAUTH_CLIENT_ID
        clientSecret: $env:GITHUB_OAUTH_CLIENT_SECRET
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml
    
    - type : file
      target : ../../examples/catalog-info.yaml

    # - type: file
    #   target: ../../catalog/weather-component.yaml     
    # - type: file
    #   target: ../../catalog/locations.yaml

    - type: file
      target: ../../catalog/calculator.yaml

    - type: file
      target: ../../catalog/palindrome.yaml

    - type: file
      target: ../../catalog/ms.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  # New adopters are encouraged to enable it as this behavior will be the default in a future release.
  useUrlReadersSearch: true

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

# jiraDashboard:
#   baseUrl: https://rsowmya1908.atlassian.net/
#   token: $env:JIRA_DASHBOARD_TOKEN
#   apiVersion: 3
#   proxyPath: /jira-dashboard
#   userEmailSuffix: '@gmail.com'
#   annotationPrefix: jira.com
#   defaultFilters:
#     - name: BackstageJQL
#       shortName: Unresolved Issues
#       query: >
#         assignee = currentUser()
#         AND resolution = Unresolved
#         ORDER BY priority DESC, updated DESC
